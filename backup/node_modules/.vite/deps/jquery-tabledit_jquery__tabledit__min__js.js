// node_modules/jquery-tabledit/jquery.tabledit.min.js
if ("undefined" == typeof jQuery)
  throw new Error("Tabledit requires jQuery library.");
!function(t) {
  "use strict";
  t.fn.Tabledit = function(e) {
    function n(e2) {
      var n2 = i.find(".tabledit-input").serialize() + "&action=" + e2, a2 = d.onAjax(e2, n2);
      if (a2 === false)
        return false;
      var l2 = t.post(d.url, n2, function(t2, n3, a3) {
        e2 === d.buttons.edit.action && (s.removeClass(d.dangerClass).addClass(d.warningClass), setTimeout(function() {
          i.find("tr." + d.warningClass).removeClass(d.warningClass);
        }, 1400)), d.onSuccess(t2, n3, a3);
      }, "json");
      return l2.fail(function(t2, n3, i2) {
        e2 === d.buttons["delete"].action ? (o.removeClass(d.mutedClass).addClass(d.dangerClass), o.find(".tabledit-toolbar button").attr("disabled", false), o.find(".tabledit-toolbar .tabledit-restore-button").hide()) : e2 === d.buttons.edit.action && s.addClass(d.dangerClass), d.onFail(t2, n3, i2);
      }), l2.always(function() {
        d.onAlways();
      }), l2;
    }
    if (!this.is("table"))
      throw new Error("Tabledit only works when applied to a table.");
    var i = this, a = { url: window.location.href, inputClass: "form-control input-sm", toolbarClass: "btn-toolbar", groupClass: "btn-group btn-group-sm", dangerClass: "danger", warningClass: "warning", mutedClass: "text-muted", eventType: "click", rowIdentifier: "id", hideIdentifier: false, autoFocus: true, editButton: true, deleteButton: true, saveButton: true, restoreButton: true, buttons: { edit: { "class": "btn btn-sm btn-default", html: '<span class="glyphicon glyphicon-pencil"></span>', action: "edit" }, "delete": { "class": "btn btn-sm btn-default", html: '<span class="glyphicon glyphicon-trash"></span>', action: "delete" }, save: { "class": "btn btn-sm btn-success", html: "Save" }, restore: { "class": "btn btn-sm btn-warning", html: "Restore", action: "restore" }, confirm: { "class": "btn btn-sm btn-danger", html: "Confirm" } }, onDraw: function() {
    }, onSuccess: function() {
    }, onFail: function() {
    }, onAlways: function() {
    }, onAjax: function() {
    } }, d = t.extend(true, a, e), s = "undefined", o = "undefined", l = "undefined", r = { columns: { identifier: function() {
      d.hideIdentifier && i.find("th:nth-child(" + parseInt(d.columns.identifier[0]) + "1), tbody td:nth-child(" + parseInt(d.columns.identifier[0]) + "1)").hide();
      var e2 = i.find("tbody td:nth-child(" + (parseInt(d.columns.identifier[0]) + 1) + ")");
      e2.each(function() {
        var e3 = '<span class="tabledit-span tabledit-identifier">' + t(this).text() + "</span>", n2 = '<input class="tabledit-input tabledit-identifier" type="hidden" name="' + d.columns.identifier[1] + '" value="' + t(this).text() + '" disabled>';
        t(this).html(e3 + n2), t(this).parent("tr").attr(d.rowIdentifier, t(this).text());
      });
    }, editable: function() {
      for (var e2 = 0; e2 < d.columns.editable.length; e2++) {
        var n2 = i.find("tbody td:nth-child(" + (parseInt(d.columns.editable[e2][0]) + 1) + ")");
        n2.each(function() {
          var n3 = t(this).text();
          d.editButton || t(this).css("cursor", "pointer");
          var i2 = '<span class="tabledit-span">' + n3 + "</span>";
          if ("undefined" != typeof d.columns.editable[e2][2]) {
            var a2 = '<select class="tabledit-input ' + d.inputClass + '" name="' + d.columns.editable[e2][1] + '" style="display: none;" disabled>';
            t.each(jQuery.parseJSON(d.columns.editable[e2][2]), function(t2, e3) {
              a2 += n3 === e3 ? '<option value="' + t2 + '" selected>' + e3 + "</option>" : '<option value="' + t2 + '">' + e3 + "</option>";
            }), a2 += "</select>";
          } else
            var a2 = '<input class="tabledit-input ' + d.inputClass + '" type="text" name="' + d.columns.editable[e2][1] + '" value="' + t(this).text() + '" style="display: none;" disabled>';
          t(this).html(i2 + a2), t(this).addClass("tabledit-view-mode");
        });
      }
    }, toolbar: function() {
      if (d.editButton || d.deleteButton) {
        var t2 = "", e2 = "", n2 = "", a2 = "", s2 = "";
        0 === i.find("th.tabledit-toolbar-column").length && i.find("tr:first").append('<th class="tabledit-toolbar-column"></th>'), d.editButton && (t2 = '<button type="button" class="tabledit-edit-button ' + d.buttons.edit["class"] + '" style="float: none;">' + d.buttons.edit.html + "</button>"), d.deleteButton && (e2 = '<button type="button" class="tabledit-delete-button ' + d.buttons["delete"]["class"] + '" style="float: none;">' + d.buttons["delete"].html + "</button>", s2 = '<button type="button" class="tabledit-confirm-button ' + d.buttons.confirm["class"] + '" style="display: none; float: none;">' + d.buttons.confirm.html + "</button>"), d.editButton && d.saveButton && (n2 = '<button type="button" class="tabledit-save-button ' + d.buttons.save["class"] + '" style="display: none; float: none;">' + d.buttons.save.html + "</button>"), d.deleteButton && d.restoreButton && (a2 = '<button type="button" class="tabledit-restore-button ' + d.buttons.restore["class"] + '" style="display: none; float: none;">' + d.buttons.restore.html + "</button>");
        var o2 = '<div class="tabledit-toolbar ' + d.toolbarClass + '" style="text-align: left;">\n                                           <div class="' + d.groupClass + '" style="float: none;">' + t2 + e2 + "</div>\n                                           " + n2 + "\n                                           " + s2 + "\n                                           " + a2 + "\n                                       </div></div>";
        i.find("tr:gt(0)").append('<td style="white-space: nowrap; width: 1%;">' + o2 + "</td>");
      }
    } } }, u = { view: function(e2) {
      var n2 = t(e2).parent("tr");
      t(e2).parent("tr").find(".tabledit-input.tabledit-identifier").prop("disabled", true), t(e2).find(".tabledit-input").blur().hide().prop("disabled", true), t(e2).find(".tabledit-span").show(), t(e2).addClass("tabledit-view-mode").removeClass("tabledit-edit-mode"), d.editButton && (n2.find("button.tabledit-save-button").hide(), n2.find("button.tabledit-edit-button").removeClass("active").blur());
    }, edit: function(e2) {
      c.reset(e2);
      var n2 = t(e2).parent("tr");
      n2.find(".tabledit-input.tabledit-identifier").prop("disabled", false), t(e2).find(".tabledit-span").hide();
      var i2 = t(e2).find(".tabledit-input");
      i2.prop("disabled", false).show(), d.autoFocus && i2.focus(), t(e2).addClass("tabledit-edit-mode").removeClass("tabledit-view-mode"), d.editButton && (n2.find("button.tabledit-edit-button").addClass("active"), n2.find("button.tabledit-save-button").show());
    } }, b = { reset: function(e2) {
      t(e2).each(function() {
        var e3 = t(this).find(".tabledit-input"), n2 = t(this).find(".tabledit-span").text();
        e3.is("select") ? e3.find("option").filter(function() {
          return t.trim(t(this).text()) === n2;
        }).attr("selected", true) : e3.val(n2), u.view(this);
      });
    }, submit: function(e2) {
      var i2 = n(d.buttons.edit.action);
      i2 !== false && (t(e2).each(function() {
        var e3 = t(this).find(".tabledit-input");
        t(this).find(".tabledit-span").text(e3.is("select") ? e3.find("option:selected").text() : e3.val()), u.view(this);
      }), s = t(e2).parent("tr"));
    } }, c = { reset: function(t2) {
      i.find(".tabledit-confirm-button").hide(), i.find(".tabledit-delete-button").removeClass("active").blur();
    }, submit: function(e2) {
      c.reset(e2), t(e2).parent("tr").find("input.tabledit-identifier").attr("disabled", false);
      var i2 = n(d.buttons["delete"].action);
      t(e2).parents("tr").find("input.tabledit-identifier").attr("disabled", true), i2 !== false && (t(e2).parent("tr").addClass("tabledit-deleted-row"), t(e2).parent("tr").addClass(d.mutedClass).find(".tabledit-toolbar button:not(.tabledit-restore-button)").attr("disabled", true), t(e2).find(".tabledit-restore-button").show(), o = t(e2).parent("tr"));
    }, confirm: function(e2) {
      i.find("td.tabledit-edit-mode").each(function() {
        b.reset(this);
      }), t(e2).find(".tabledit-delete-button").addClass("active"), t(e2).find(".tabledit-confirm-button").show();
    }, restore: function(e2) {
      t(e2).parent("tr").find("input.tabledit-identifier").attr("disabled", false);
      var i2 = n(d.buttons.restore.action);
      t(e2).parents("tr").find("input.tabledit-identifier").attr("disabled", true), i2 !== false && (t(e2).parent("tr").removeClass("tabledit-deleted-row"), t(e2).parent("tr").removeClass(d.mutedClass).find(".tabledit-toolbar button").attr("disabled", false), t(e2).find(".tabledit-restore-button").hide(), l = t(e2).parent("tr"));
    } };
    return r.columns.identifier(), r.columns.editable(), r.columns.toolbar(), d.onDraw(), d.deleteButton && (i.on("click", "button.tabledit-delete-button", function(e2) {
      if (e2.handled !== true) {
        e2.preventDefault();
        var n2 = t(this).hasClass("active"), i2 = t(this).parents("td");
        c.reset(i2), n2 || c.confirm(i2), e2.handled = true;
      }
    }), i.on("click", "button.tabledit-confirm-button", function(e2) {
      if (e2.handled !== true) {
        e2.preventDefault();
        var n2 = t(this).parents("td");
        c.submit(n2), e2.handled = true;
      }
    })), d.restoreButton && i.on("click", "button.tabledit-restore-button", function(e2) {
      e2.handled !== true && (e2.preventDefault(), c.restore(t(this).parents("td")), e2.handled = true);
    }), d.editButton ? (i.on("click", "button.tabledit-edit-button", function(e2) {
      if (e2.handled !== true) {
        e2.preventDefault();
        var n2 = t(this), a2 = n2.hasClass("active");
        b.reset(i.find("td.tabledit-edit-mode")), a2 || t(n2.parents("tr").find("td.tabledit-view-mode").get().reverse()).each(function() {
          u.edit(this);
        }), e2.handled = true;
      }
    }), i.on("click", "button.tabledit-save-button", function(e2) {
      e2.handled !== true && (e2.preventDefault(), b.submit(t(this).parents("tr").find("td.tabledit-edit-mode")), e2.handled = true);
    })) : (i.on(d.eventType, "tr:not(.tabledit-deleted-row) td.tabledit-view-mode", function(t2) {
      t2.handled !== true && (t2.preventDefault(), b.reset(i.find("td.tabledit-edit-mode")), u.edit(this), t2.handled = true);
    }), i.on("change", "select.tabledit-input:visible", function() {
      event.handled !== true && (b.submit(t(this).parent("td")), event.handled = true);
    }), t(document).on("click", function(t2) {
      var e2 = i.find(".tabledit-edit-mode");
      e2.is(t2.target) || 0 !== e2.has(t2.target).length || b.reset(i.find(".tabledit-input:visible").parent("td"));
    })), t(document).on("keyup", function(t2) {
      var e2 = i.find(".tabledit-input:visible"), n2 = i.find(".tabledit-confirm-button");
      if (e2.length > 0)
        var a2 = e2.parents("td");
      else {
        if (!(n2.length > 0))
          return;
        var a2 = n2.parents("td");
      }
      switch (t2.keyCode) {
        case 9:
          d.editButton || (b.submit(a2), u.edit(a2.closest("td").next()));
          break;
        case 13:
          b.submit(a2);
          break;
        case 27:
          b.reset(a2), c.reset(a2);
      }
    }), this;
  };
}(jQuery);
/*! Bundled license information:

jquery-tabledit/jquery.tabledit.min.js:
  (*!
   * Tabledit v1.2.3 (https://github.com/markcell/jQuery-Tabledit)
   * Copyright (c) 2015 Celso Marques
   * Licensed under MIT (https://github.com/markcell/jQuery-Tabledit/blob/master/LICENSE)
   *)
*/
//# sourceMappingURL=jquery-tabledit_jquery__tabledit__min__js.js.map
