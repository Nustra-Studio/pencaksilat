// node_modules/admin-resources/rwd-table/rwd-table.min.js
!function(d) {
  "use strict";
  var a = function(t2, i) {
    var e2 = this;
    if (this.options = i, this.$tableWrapper = null, this.$tableScrollWrapper = d(t2), this.$table = d(t2).find("table"), 1 !== this.$table.length)
      throw new Error("Exactly one table is expected in a .table-responsive div.");
    this.$tableScrollWrapper.attr("data-pattern", this.options.pattern), this.id = this.$table.prop("id") || this.$tableScrollWrapper.prop("id") || "id" + Math.random().toString(16).slice(2), this.$tableClone = null, this.$stickyTableHeader = null, this.$thead = this.$table.find("thead"), this.$hdrCells = this.$thead.find("tr").first().find("th"), this.$bodyRows = this.$table.find("tbody, tfoot").find("tr"), this.$btnToolbar = null, this.$dropdownGroup = null, this.$dropdownBtn = null, this.$dropdownContainer = null, this.$displayAllBtn = null, this.$focusGroup = null, this.$focusBtn = null, this.displayAllTrigger = "display-all-" + this.id + ".responsive-table", this.idPrefix = this.id + "-col-", this.headerColIndices = {}, this.headerRowIndices = {}, this.wrapTable(), this.createButtonToolbar(), this.buildHeaderCellIndices(), this.setupTableHeader(), this.setupBodyRows(), this.options.stickyTableHeader && this.createStickyTableHeader(), this.$dropdownContainer.is(":empty") && this.$dropdownGroup.hide(), d(window).bind("orientationchange resize " + this.displayAllTrigger, function() {
      e2.$dropdownContainer.find("input").trigger("updateCheck"), d.proxy(e2.updateSpanningCells(), e2);
    }).trigger("resize");
  };
  a.DEFAULTS = { pattern: "priority-columns", stickyTableHeader: true, fixedNavbar: ".navbar-fixed-top", addDisplayAllBtn: true, addFocusBtn: true, focusBtnIcon: "glyphicon glyphicon-screenshot", mainContainer: window, i18n: { focus: "Focus", display: "Display", displayAll: "Display all" } }, a.prototype.wrapTable = function() {
    this.$tableScrollWrapper.wrap('<div class="table-wrapper"/>'), this.$tableWrapper = this.$tableScrollWrapper.parent();
  }, a.prototype.createButtonToolbar = function() {
    var t2 = this;
    this.$btnToolbar = d('[data-responsive-table-toolbar="' + this.id + '"]').addClass("btn-toolbar"), 0 === this.$btnToolbar.length && (this.$btnToolbar = d('<div class="btn-toolbar" />')), this.$dropdownGroup = d('<div class="btn-group dropdown-btn-group pull-right" />'), this.$dropdownBtn = d('<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">' + this.options.i18n.display + ' <span class="caret"></span></button>'), this.$dropdownContainer = d('<ul class="dropdown-menu"/>'), this.options.addFocusBtn && (this.$focusGroup = d('<div class="btn-group focus-btn-group" />'), this.$focusBtn = d('<button type="button" class="btn btn-default">' + this.options.i18n.focus + "</button>"), this.options.focusBtnIcon && this.$focusBtn.prepend('<span class="' + this.options.focusBtnIcon + '"></span> '), this.$focusGroup.append(this.$focusBtn), this.$btnToolbar.append(this.$focusGroup), this.$focusBtn.click(function() {
      d.proxy(t2.activateFocus(), t2);
    }), this.$bodyRows.click(function() {
      d.proxy(t2.focusOnRow(d(this)), t2);
    })), this.options.addDisplayAllBtn && (this.$displayAllBtn = d('<button type="button" class="btn btn-default">' + this.options.i18n.displayAll + "</button>"), this.$dropdownGroup.append(this.$displayAllBtn), this.$table.hasClass("display-all") && this.$displayAllBtn.addClass("btn-primary"), this.$displayAllBtn.click(function() {
      d.proxy(t2.displayAll(null, true), t2);
    })), this.$dropdownGroup.append(this.$dropdownBtn).append(this.$dropdownContainer), this.$btnToolbar.append(this.$dropdownGroup), this.$tableScrollWrapper.before(this.$btnToolbar);
  }, a.prototype.clearAllFocus = function() {
    this.$bodyRows.removeClass("unfocused"), this.$bodyRows.removeClass("focused");
  }, a.prototype.activateFocus = function() {
    this.clearAllFocus(), this.$focusBtn && this.$focusBtn.toggleClass("btn-primary"), this.$table.toggleClass("focus-on");
  }, a.prototype.focusOnRow = function(t2) {
    if (this.$table.hasClass("focus-on")) {
      var i = d(t2).hasClass("focused");
      this.clearAllFocus(), i || (this.$bodyRows.addClass("unfocused"), d(t2).addClass("focused"));
    }
  }, a.prototype.displayAll = function(t2, i) {
    this.$displayAllBtn && this.$displayAllBtn.toggleClass("btn-primary", t2), this.$table.toggleClass("display-all", t2), this.$tableClone && this.$tableClone.toggleClass("display-all", t2), i && d(window).trigger(this.displayAllTrigger);
  }, a.prototype.preserveDisplayAll = function() {
    var t2 = "table-cell";
    d("html").hasClass("lt-ie9") && (t2 = "inline"), d(this.$table).find("th, td").css("display", t2), this.$tableClone && d(this.$tableClone).find("th, td").css("display", t2);
  }, a.prototype.createStickyTableHeader = function() {
    var i = this;
    i.$tableClone = i.$table.clone(), i.$tableClone.prop("id", this.id + "-clone"), i.$tableClone.find("[id]").each(function() {
      d(this).prop("id", d(this).prop("id") + "-clone");
    }), i.$tableClone.wrap('<div class="sticky-table-header"/>'), i.$stickyTableHeader = i.$tableClone.parent(), i.$stickyTableHeader.css("height", i.$thead.height() + 2), i.$table.before(i.$stickyTableHeader), d(this.options.mainContainer).bind("scroll", function() {
      d.proxy(i.updateStickyTableHeader(), i);
    }), d(window).bind("resize", function(t2) {
      d.proxy(i.updateStickyTableHeader(), i);
    }), d(i.$tableScrollWrapper).bind("scroll", function() {
      d.proxy(i.updateStickyTableHeader(), i);
    }), i.useFixedSolution = !e() || 8 <= function() {
      {
        if (e()) {
          var t2 = parseFloat(("" + (/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [0, ""])[1]).replace("undefined", "3_2").replace("_", ".").replace("_", ""));
          return t2;
        }
        return 0;
      }
    }(), i.useFixedSolution ? i.$tableScrollWrapper.addClass("fixed-solution") : i.$tableScrollWrapper.addClass("absolute-solution");
  }, a.prototype.updateStickyTableHeader = function() {
    var t2, i = this, e2 = 0, o = i.$table.offset().top, a2 = d(this.options.mainContainer).scrollTop() - 1, s = i.$table.height() - i.$stickyTableHeader.height(), n = a2 + d(this.options.mainContainer).height() - d(document).height(), l = 0;
    d(i.options.fixedNavbar).length && (a2 += l = d(i.options.fixedNavbar).first().height());
    if (t2 = this.options.mainContainer === window ? o < a2 && a2 < o + i.$table.height() : o <= 0 && -o < i.$table.height(), i.useFixedSolution) {
      if (i.$stickyTableHeader.scrollLeft(i.$tableScrollWrapper.scrollLeft()), e2 = l - 1, this.options.mainContainer === window && s < a2 - o ? (e2 -= a2 - o - s, i.$stickyTableHeader.addClass("border-radius-fix")) : this.options.mainContainer !== window && s < -o ? (e2 -= -o - s, i.$stickyTableHeader.addClass("border-radius-fix")) : i.$stickyTableHeader.removeClass("border-radius-fix"), t2)
        return void i.$stickyTableHeader.css({ visibility: "visible", top: e2 + "px", width: i.$tableScrollWrapper.innerWidth() + "px" });
      i.$stickyTableHeader.css({ visibility: "hidden", width: "auto" });
    } else {
      (e2 = this.options.mainContainer === window ? a2 - o - 1 : -o - 1) < 0 ? e2 = 0 : s < e2 && (e2 = s), this.options.mainContainer === window && 0 < n && (e2 -= n), t2 ? (i.$stickyTableHeader.css({ visibility: "visible" }), i.$stickyTableHeader.animate({ top: e2 + "px" }, 400), i.$thead.css({ visibility: "hidden" })) : i.$stickyTableHeader.animate({ top: "0" }, 400, function() {
        i.$thead.css({ visibility: "visible" }), i.$stickyTableHeader.css({ visibility: "hidden" });
      });
    }
  }, a.prototype.setupTableHeader = function() {
    var n = this;
    n.$hdrCells.each(function(t2) {
      var i = d(this), e2 = i.prop("id"), o = i.text();
      if (e2 || (e2 = n.idPrefix + t2, i.prop("id", e2)), "" === o && (o = i.attr("data-col-name")), i.is("[data-priority]") && -1 !== i.data("priority")) {
        var a2 = d('<li class="checkbox-row"><input type="checkbox" name="toggle-' + e2 + '" id="toggle-' + e2 + '" value="' + e2 + '" /> <label for="toggle-' + e2 + '">' + o + "</label></li>"), s = a2.find("input");
        n.$dropdownContainer.append(a2), a2.click(function() {
          s.prop("checked", !s.prop("checked")), s.trigger("change");
        }), d("html").hasClass("lt-ie9") && s.click(function() {
          d(this).trigger("change");
        }), a2.find("label").click(function(t3) {
          t3.stopPropagation();
        }), a2.find("input").click(function(t3) {
          t3.stopPropagation();
        }).change(function() {
          var e3 = d(this), t3 = e3.val(), i2 = n.$tableWrapper.find("#" + t3 + ", #" + t3 + "-clone, [data-columns~=" + t3 + "]");
          n.$table.hasClass("display-all") && (d.proxy(n.preserveDisplayAll(), n), n.$table.removeClass("display-all"), n.$tableClone && n.$tableClone.removeClass("display-all"), n.$displayAllBtn.removeClass("btn-primary")), i2.each(function() {
            var t4 = d(this);
            if (e3.is(":checked")) {
              if (!t4.closest("thead").length && "none" !== t4.css("display")) {
                var i3 = Math.min(parseInt(t4.prop("colSpan")) + 1, t4.attr("data-org-colspan"));
                t4.prop("colSpan", i3);
              }
              t4.show();
            } else
              !t4.closest("thead").length && 1 < parseInt(t4.prop("colSpan")) ? t4.prop("colSpan", parseInt(t4.prop("colSpan")) - 1) : t4.hide();
          });
        }).bind("updateCheck", function() {
          "none" !== i.css("display") ? d(this).prop("checked", true) : d(this).prop("checked", false);
        });
      }
    }), d.isEmptyObject(this.headerRowIndices) || n.setupRow(this.$thead.find("tr:eq(1)"), this.headerRowIndices);
  }, a.prototype.setupBodyRows = function() {
    var t2 = this;
    t2.$bodyRows.each(function() {
      t2.setupRow(d(this), t2.headerColIndices);
    });
  }, a.prototype.setupRow = function(t2, s) {
    var n = this;
    if (!t2.data("setup")) {
      t2.data("setup", true);
      var l = 0;
      t2.find("th, td").each(function() {
        var t3 = d(this), i = "", e2 = t3.prop("colSpan");
        t3.attr("data-org-colspan", e2), 1 < e2 && t3.addClass("spn-cell");
        for (var o = l; o < l + e2; o++) {
          i = i + " " + n.idPrefix + s[o];
          var a2 = n.$table.find("#" + n.idPrefix + s[o]).attr("data-priority");
          a2 && t3.attr("data-priority", a2);
        }
        i = i.substring(1), t3.attr("data-columns", i), l += e2;
      });
    }
  }, a.prototype.buildHeaderCellIndices = function() {
    var s = this, n = {};
    this.headerColIndices = {}, this.headerRowIndices = {};
    var l = 0, r = 0;
    if (this.$thead.find("tr").first().find("th").each(function(t2) {
      for (var i = d(this), e2 = i.prop("colSpan"), o = i.prop("rowSpan"), a2 = 0; a2 < e2; a2++)
        s.headerColIndices[l + t2 + a2] = t2, 0 <= l + t2 + a2 && (n[l + t2 + a2 - r] = r);
      1 < o && r++, l += e2 - 1;
    }), 2 < this.$thead.find("tr").length)
      throw new Error("This plugin doesnt support more than two rows in thead.");
    2 === this.$thead.find("tr").length && d(this.$thead.find("tr")[1]).find("th").each(function(t2) {
      s.headerRowIndices[t2] = s.headerColIndices[n[t2] + t2];
    });
  }, a.prototype.update = function() {
    this.$bodyRows = this.$table.find("tbody, tfoot").find("tr"), this.setupBodyRows(), this.$tableClone.find("tbody, tfoot").remove();
    var t2 = this.$table.find("tbody, tfoot").clone();
    t2.find("[id]").each(function() {
      d(this).prop("id", d(this).prop("id") + "-clone");
    }), t2.appendTo(this.$tableClone), this.$dropdownContainer.find("input").trigger("change");
  }, a.prototype.updateSpanningCells = function() {
    this.$table.find(".spn-cell").each(function() {
      for (var t2 = d(this), i = t2.attr("data-columns").split(" "), e2 = i.length, o = 0, a2 = 0; a2 < e2; a2++)
        "none" === d("#" + i[a2]).css("display") && o++;
      o !== e2 ? t2.show() : t2.hide(), t2.prop("colSpan", Math.max(e2 - o, 1));
    });
  };
  var t = d.fn.responsiveTable;
  function e() {
    return !!(navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i));
  }
  d.fn.responsiveTable = function(o) {
    return this.each(function() {
      var t2 = d(this), i = t2.data("responsiveTable"), e2 = d.extend({}, a.DEFAULTS, t2.data(), "object" == typeof o && o);
      "" !== e2.pattern && (i || t2.data("responsiveTable", i = new a(this, e2)), "string" == typeof o && i[o]());
    });
  }, d.fn.responsiveTable.Constructor = a, d.fn.responsiveTable.noConflict = function() {
    return d.fn.responsiveTable = t, this;
  }, d(document).on("ready.responsive-table.data-api", function() {
    d(".table-responsive[data-pattern]").each(function() {
      var t2 = d(this);
      t2.responsiveTable(t2.data());
    });
  }), d(document).on("click.dropdown.data-api", ".dropdown-menu .checkbox-row", function(t2) {
    t2.stopPropagation();
  }), d(document).ready(function() {
    d("html").removeClass("no-js").addClass("js"), void 0 !== window.matchMedia || void 0 !== window.msMatchMedia || void 0 !== window.styleMedia ? d("html").addClass("mq") : d("html").addClass("no-mq"), "ontouchstart" in window ? d("html").addClass("touch") : d("html").addClass("no-touch");
  });
}(jQuery);
/*! Bundled license information:

admin-resources/rwd-table/rwd-table.min.js:
  (*!
   * Responsive Tables v5.3.3 (http://gergeo.se/RWD-Table-Patterns)
   * This is an awesome solution for responsive tables with complex data.
   * Authors: Nadan Gergeo <nadan@blimp.se> (www.blimp.se), Lucas Wiener <lucas@blimp.se> & "Maggie Wachs (www.filamentgroup.com)"
   * Licensed under MIT (https://github.com/nadangergeo/RWD-Table-Patterns/blob/master/LICENSE-MIT)
   *)
*/
//# sourceMappingURL=admin-resources_rwd-table_rwd-table__min__js.js.map
